

// Trabalho de Programação orientada a objeto
//
//  Obs. O programa deve ser compilado em g++
//
#include <conio.h>
#include <cstdlib>
#include <iostream>
#include <Windows.h>

#define MAPMAX 20
#define MAXPRS 30           // criei com 20
#define EFTMAX 5            // quantidade de efeito que um personagem pode ter
#define tamanhoDoTorneio 16 // pode ser impar, mas deixar par
#define totalDeClasse 5     // atualizar de acordo com quantidade de classes criadas, funciona na hora de dar uma classe a um personagem delcarado sem nenhuma
#define tamanhoDoInventario 10

namespace
{
    void printa(std::string s)
    {
        std::cout << s;
    };
    void pula()
    {
        std::cout << std::endl;
    }
    int potencia(int n, int p)
    {
        if (p == 0)
        {
            return 1;
        }
        else
        {
            // (5,5) -> (5,4) -> (5,3) -> (5,2) -> (5,1) -> (5,0)
            //   5   *    5   *    5   *    5    *   5    *   1 (p=0 -> 1) = 5^5
            return n * potencia(n, p - 1);
        }
    }
    bool veSeTem(int quantidade, int velhoOeste[], int tamanho, int procurado)
    {
        int contador = 0;
        for (int cidade = 0; cidade < tamanho; cidade++)
        {
            if (procurado == velhoOeste[cidade])
            {
                contador++;
            }
        }
        if (contador >= quantidade)
            return true;
        else
        {
            return false;
        }
    }
    std::string toString(int num)
    {
        char str[15 + sizeof(char)];
        sprintf_s(str, "%d", num);
        return std::string(str);
    }
    std::string letraNoDano(double dano)
    {
        char str[15 + sizeof(char)];
        if (dano >= 1000 && dano < 1000000)
        {
            dano = dano / 1000;
            sprintf_s(str, "%.2f", dano);
            return std::string(str) + ("K");
        }
        else if (dano >= 1000000 && dano < 1000000000)
        {
            dano = dano / 1000000;
            sprintf_s(str, "%.2f", dano);
            return std::string(str) + ("M");
        }
        sprintf_s(str, "%.2f", dano);
        return str;
    }
};

enum classe
{
    padrao = -1,
    arcanista = 0,
    monge = 1,
    assassino = 2,
    guerreiro = 3,
    paladino = 4,
    druida = 5
};

enum efeitos
{
    semEfeito = 0,
    curaPassiva = 1,
    sangramento = 2,

};
class Personagem
{
private:
    std::string nome = "";
    std::string classe = "Padrao";
    std::string atkEsp = "";
    int idPers;
    int efeitos[EFTMAX][2];
    double maxVida = 0;
    double vida;
    double atk;
    double def;
    double danoEfetuado = 0;
    int qntTurno = 0;
    int qntEsp = 0;
    int indexDerrotados = 0;

protected:
    Personagem *derrotados[20];

public:
    // Test
    void destruirDerrotados()
    {
        for (int i = 0; i < getIndexDerrotados(); i++)
        {
            delete (derrotados[i]);
        }
    }

    // Get's
    std::string getNome() { return this->nome; }
    std::string getAtkEsp() { return this->atkEsp; }
    std::string getClasse() { return this->classe; }
    // int getId() { return this->idPers; }
    double getMaxVida() { return this->maxVida; }
    double getVida() { return this->vida; }
    double getAtk() { return this->atk; }
    double getDef() { return this->def; }
    double getDanoEfetuado() { return this->danoEfetuado; }
    int getQntEsp() { return this->qntEsp; }
    int getQntTurno() { return this->qntTurno; }
    int getEfeitosDuracao(int posicao) { return this->efeitos[posicao][1]; }
    int getIndexDerrotados() { return this->indexDerrotados; }
    Personagem *getDerrotados(int posicao)
    {
        if (posicao < 0 || posicao > sizeof(this->derrotados) ||
            this->derrotados[posicao] == nullptr)
        {
            return nullptr;
        }
        else
        {
            return this->derrotados[posicao];
        }
    }
    double getAtaqueNormal(Personagem **oponente, int dado)
    {
        double dano;
        std::cout << "Dado: " << dado << std::endl;
        dano = getAtk() - (*oponente)->getDef();

        return dano;
    }
    virtual double getAtaqueEspecial(Personagem **oponente, int dado)
    {
        std::cout << "Dado: " << dado << " " << getAtkEsp() << std::endl;
        return getAtk() * 1.5;
    }

    // Set's
    void setNome(std::string nome) { this->nome = nome; }
    void setAtkEsp(std::string atkEsp) { this->atkEsp = atkEsp; }
    void setClasse(std::string classe) { this->classe = classe; }
    // void setId(int idPers) { this->idPers = idPers; }
    void setMaxVida(double maxVida) { this->maxVida = maxVida; }
    void setVida(double vida) { this->vida = vida; }
    void setAtk(double atk) { this->atk = atk; }
    void setDef(double def) { this->def = def; }
    void setIndexDerrotados(int indexDerrotados) { this->indexDerrotados = indexDerrotados; }
    void setDanoEfetuado(double danoEfetuado) { this->danoEfetuado = danoEfetuado; }
    void setQntEsp(int qntEsp) { this->qntEsp = qntEsp; }
    void setQntTurno(int qntTurno) { this->qntTurno = qntTurno; }
    void setDerrotados(Personagem **d1)
    {
        this->derrotados[this->indexDerrotados] = *d1;
        this->indexDerrotados++;
    }
    void setEfeitos(int efeito, int posicao, int duracao)
    {
        this->efeitos[posicao][0] = efeito;
        this->efeitos[posicao][1] = duracao;
    }
    void setEfeitosDuracao(int posicao, int duracao)
    {
        this->efeitos[posicao][1] = duracao;
    }
    void adicionaEfeito(int efeito, int duracao)
    {
        for (int i = 0; i <= EFTMAX; i++)
        {
            if (this->efeitos[i][0] == semEfeito)
            {
                setEfeitos(efeito, i, duracao);
                break;
            }
        }
    }
    void adicionaDanoEfetuado(double dano) { this->setDanoEfetuado(this->getDanoEfetuado() + dano); }
    void adicionaQntEsp() { this->setQntEsp(this->getQntEsp() + 1); }
    void adicionaTurno() { this->setQntTurno(this->getQntTurno() + 1); }
    void fullHeal() { this->setVida(getMaxVida()); }
    void VeAVida()
    {
        if (this->getVida() > this->getMaxVida())
        {
            this->setVida(getMaxVida());
        }
        else if (this->getVida() <= 0)
        {
            this->setVida(0);
        }
    }
    void zerarEfeitos()
    {
        for (int i = 0; i <= EFTMAX; i++)
        {
            setEfeitos(semEfeito, i, -1);
        }
    }
    double DaDano(Personagem *oponente)
    {
        int dado;
        double dano;
        this->adicionaTurno();

        for (int i = 0; i <= EFTMAX; i++)
            switch (this->efeitos[i][0])
            {
            case semEfeito:
                break;
            case curaPassiva:
                setVida(getVida() + (getMaxVida() / 20));
                setEfeitosDuracao(i, getEfeitosDuracao(i) - 1);
                std::cout << this->getNome() << " se curou." << std::endl;
                if (getEfeitosDuracao(i) == 0)
                    this->efeitos[i][0] = semEfeito;
                break;
            case sangramento:
                setVida(getVida() - (oponente->getAtk() / 10));
                setEfeitosDuracao(i, getEfeitosDuracao(i) - 1);
                std::cout << this->getNome() << " esta sangrando."
                          << std::endl
                          << (oponente->getAtk() / 10) << " de vida perdida"
                          << std::endl;
                if (getEfeitosDuracao(i) == 0)
                    this->efeitos[i][0] = semEfeito;
                break;
            }

        if ((dado = (rand() % 100)) > 20)
        {
            dano = this->getAtaqueNormal(&oponente, dado);
            if (dano < 0)
            {
                dano = 0;
            }
            this->adicionaDanoEfetuado(dano);
            return dano;
        }
        else
        {
            dano = this->getAtaqueEspecial(&oponente, dado);
            this->adicionaQntEsp();
            if (dano < 0)
            {
                dano = 0;
            }
            this->adicionaDanoEfetuado(dano);
            return dano;
        }
    }
    virtual void mostrar()
    {
        std::cout << "------------------------------------" << std::endl
                  << "Nome:\t\t" << getNome() << std::endl
                  << "Classe:\t\t" << getClasse() << std::endl
                  << "Vida:\t\t" << getVida() << "/" << getMaxVida()
                  << std::endl
                  << "Atk:\t\t" << letraNoDano(getAtk()) << std::endl
                  << "Def:\t\t" << getDef() << std::endl;
    }
    // dano efetuado, vida restante, numero de rounds, atksespeciais
    void estatisticas()
    {
        std::cout << "------------------------------------" << std::endl
                  << "Nome:\t\t\t" << getNome() << std::endl
                  << "Classe:\t\t\t" << getClasse() << std::endl
                  << "Vida Restante:\t\t" << getVida() << " de " << getMaxVida()
                  << std::endl
                  << "Turnos jogados:\t\t" << getQntTurno() << std::endl
                  << "Ataque Especial:\t" << getAtkEsp() << std::endl
                  << "Vezes Usado:\t\t" << getQntEsp() << std::endl
                  << "Dano Total:\t\t" << letraNoDano(getDanoEfetuado())
                  << std::endl
                  << "------------------------------------" << std::endl;
    }

    Personagem(std::string nomePadrao, double vida, double atk, double def)
    {
        setNome(nomePadrao);
        setAtkEsp("Critico");
        setMaxVida(vida);
        setVida(vida);
        setAtk(atk);
        setDef(def);
        zerarEfeitos();
        // mostrar();
    }
    Personagem() {}

    ~Personagem()
    {
        for (int i = 0; i < sizeof(derrotados) / sizeof(derrotados[0]) - 1; i++)
        {
            delete (derrotados[i]);
        }
    }
};

class Arcanista : public Personagem
{
private:
    double magia;

public:
    double getMagia() { return this->magia; }
    void setMagia(double magia) { this->magia = magia; }
    double getAtaqueEspecial(Personagem **oponente, int dado) override
    {
        std::cout << "Dado: " << dado << std::endl
                  << getAtkEsp() << ": " << this->getMagia() << std::endl;
        return this->getMagia();
    }
    void mostrar()
    {
        Personagem::mostrar();
        std::cout << "Magia:\t\t" << this->getMagia() << std::endl
                  << "------------------------------------" << std::endl;
    }
    Arcanista(std::string nomePadrao, double vida, double atk, double def, double magia)
    {
        setClasse("Arcanista");
        setAtkEsp("Bola De Fogo!");
        setNome(nomePadrao);
        setMaxVida(50 + vida + (double)(rand() % 20));
        setVida(getMaxVida());
        setAtk(20 + atk + (double)(rand() % 20));
        setDef(20 + def + (double)(rand() % 20));
        setMagia(20 + magia + (double)(rand() % 100));
        zerarEfeitos();
    }

    ~Arcanista()
    {
        for (int i = 0; i < sizeof(derrotados) / sizeof(derrotados[0]) - 1; i++)
        {
            delete (derrotados[i]);
        }
    }
};

class Monge : public Personagem
{
private:
    double fe;

public:
    double getFe() { return this->fe; }
    void setFe(double fe) { this->fe = fe; }

    double getAtaqueEspecial(Personagem **oponente, int dado) override
    {
        std::cout << "Dado: " << dado << std::endl
                  << getAtkEsp() << ": " << this->getFe() << std::endl;
        setVida(getVida() + getFe());
        return 0;
    }
    void mostrar()
    {
        Personagem::mostrar();
        std::cout << "Fe:\t\t" << this->getFe() << std::endl
                  << "------------------------------------" << std::endl;
    }
    Monge(std::string nomePadrao, double vida, double atk, double def, double fe)
    {
        setClasse("Monge");
        this->setAtkEsp("Cura Divina!");
        setNome(nomePadrao);
        setMaxVida(200 + vida + (double)(rand() % 10));
        setVida(getMaxVida());
        setAtk(50 + atk + (double)(rand() % 20));
        setDef(50 + def + (double)(rand() % 20));
        setFe(0 + fe + (double)(rand() % 2));
        zerarEfeitos();
    }
    ~Monge()
    {
        for (int i = 0; i < sizeof(derrotados) / sizeof(derrotados[0]) - 1; i++)
        {
            delete (derrotados[i]);
        }
    }
};
class Assassino : public Personagem
{
private:
    double penetracao;

public:
    double getPenetracao() { return this->penetracao; }
    void setPenetracao(double penetracao) { this->penetracao = penetracao; }

    double getAtaqueEspecial(Personagem **oponente, int dado) override
    {
        std::cout << "Dado: " << dado << std::endl
                  << this->getAtkEsp() << ": " << this->getPenetracao()
                  << std::endl;
        (*oponente)->adicionaEfeito(sangramento, 3);
        return this->getAtk() - ((*oponente)->getDef() - this->getPenetracao());
    }
    void mostrar()
    {
        Personagem::mostrar();
        std::cout << "Penetracao:\t" << this->getPenetracao() << std::endl
                  << "------------------------------------" << std::endl;
    }
    Assassino(std::string nomePadrao, double vida, double atk, double def, double chanceCritica)
    {
        setClasse("Assassino");
        this->setAtkEsp("Sangre!");
        setNome(nomePadrao);
        setMaxVida(100 + vida + (double)(rand() % 10));
        setVida(getMaxVida());
        setAtk(70 + atk + (double)(rand() % 30));
        setDef(20 + def + (double)(rand() % 10));
        setPenetracao(20 + chanceCritica + (double)(rand() % 20));
        zerarEfeitos();
    }
    ~Assassino()
    {
        for (int i = 0; i < sizeof(derrotados) / sizeof(derrotados[0]) - 1; i++)
        {
            delete (derrotados[i]);
        }
    }
};

class Druida : public Personagem
{
private:
    double espirito;

public:
    double getEspirito() { return this->espirito; }
    void setEspirito(double espirito) { this->espirito = espirito; }

    double getAtaqueEspecial(Personagem **oponente, int dado) override
    {
        std::cout << "Dado: " << dado << std::endl
                  << this->getAtkEsp() << ": " << this->getEspirito()
                  << std::endl;
        (*oponente)->adicionaEfeito(curaPassiva, 2);
        setVida(getVida() + this->getEspirito());
        return 0;
    }
    void mostrar()
    {
        Personagem::mostrar();
        std::cout << "Espirito:\t" << this->getEspirito() << std::endl
                  << "------------------------------------" << std::endl;
    }
    Druida(std::string nomePadrao, double vida, double atk, double def, double espirito)
    {
        setClasse("Druida");
        this->setAtkEsp("Força animal!");
        setNome(nomePadrao);
        setMaxVida(100 + vida + (double)(rand() % 10));
        setVida(getMaxVida());
        setAtk(70 + atk + (double)(rand() % 30));
        setDef(20 + def + (double)(rand() % 10));
        setEspirito(20 + espirito + (double)(rand() % 20));
        zerarEfeitos();
    }
    ~Druida()
    {
        for (int i = 0; i < sizeof(derrotados) / sizeof(derrotados[0]) - 1; i++)
        {
            delete (derrotados[i]);
        }
    }
};
class Guerreiro : public Personagem
{
private:
    double sede;

public:
    double getSede() { return this->sede; }
    void setSede(double sede) { this->sede = sede; }

    double getAtaqueEspecial(Personagem **oponente, int dado) override
    {
        std::cout << "Dado: " << dado << std::endl
                  << this->getAtkEsp() << ": " << this->getSede()
                  << std::endl;
        (*oponente)->adicionaEfeito(sangramento, 3);
        setVida(getVida() + this->getSede());
        return (this->getAtk() * 1.5) - ((*oponente)->getDef());
    }
    void mostrar()
    {
        Personagem::mostrar();
        std::cout << "Sede:\t\t" << this->getSede() << std::endl
                  << "------------------------------------" << std::endl;
    }
    Guerreiro(std::string nomePadrao, double vida, double atk, double def, double sede)
    {
        setClasse("Guerreiro");
        this->setAtkEsp("Vamos para a batalha!");
        setNome(nomePadrao);
        setMaxVida(100 + vida + (double)(rand() % 10));
        setVida(getMaxVida());
        setAtk(70 + atk + (double)(rand() % 30));
        setDef(20 + def + (double)(rand() % 10));
        setSede(20 + sede + (double)(rand() % 20));
        zerarEfeitos();
    }
    ~Guerreiro()
    {
        for (int i = 0; i < sizeof(derrotados) / sizeof(derrotados[0]) - 1; i++)
        {
            delete (derrotados[i]);
        }
    }
};
class Paladino : public Personagem
{
private:
    double bencao;

public:
    double getBencao() { return this->bencao; }
    void setBencao(double bencao) { this->bencao = bencao; }

    double getAtaqueEspecial(Personagem **oponente, int dado) override
    {
        std::cout << "Dado: " << dado << std::endl
                  << this->getAtkEsp() << ": " << this->getBencao()
                  << std::endl;
        return this->getVida() - ((*oponente)->getDef() - this->getBencao());
    }
    void mostrar()
    {
        Personagem::mostrar();
        std::cout << "Bencao:\t" << this->getBencao() << std::endl
                  << "------------------------------------" << std::endl;
    }
    Paladino(std::string nomePadrao, double vida, double atk, double def, double armadura)
    {
        setClasse("Paladino");
        this->setAtkEsp("Bencao suprema!");
        setNome(nomePadrao);
        setMaxVida(100 + vida + (double)(rand() % 10));
        setVida(getMaxVida());
        setAtk(70 + atk + (double)(rand() % 30));
        setDef(20 + def + (double)(rand() % 10));
        setBencao(20 + armadura + (double)(rand() % 20));
        zerarEfeitos();
    }
    ~Paladino()
    {
        for (int i = 0; i < sizeof(derrotados) / sizeof(derrotados[0]) - 1; i++)
        {
            delete (derrotados[i]);
        }
    }
};

class Combate
{
public:
    Personagem *inimigoAleatorio()
    {
        switch (rand() % totalDeClasse)
        {
        case arcanista: // Classe(id,nome,vida,ataque,defesa,atributoEspecial)
            return new Arcanista("a",
                                 (double)(rand() % 30), (double)(rand() % 30),
                                 (double)(rand() % 30), (double)(rand() % 30));
            break;
        case monge:
            return new Monge("a",
                             (double)(rand() % 30), (double)(rand() % 30),
                             (double)(rand() % 30), (double)(rand() % 30));
            break;
        case assassino:
            return new Assassino("a",
                                 (double)(rand() % 30), (double)(rand() % 30),
                                 (double)(rand() % 30), (double)(rand() % 30));
            break;
        case guerreiro:
            return new Guerreiro("a",
                                 (double)(rand() % 30), (double)(rand() % 30),
                                 (double)(rand() % 30), (double)(rand() % 30));
            break;
        case druida:
            return new Druida("a",
                              (double)(rand() % 30), (double)(rand() % 30),
                              (double)(rand() % 30), (double)(rand() % 30));
            break;
        case paladino:
            return new Paladino("a",
                                (double)(rand() % 30), (double)(rand() % 30),
                                (double)(rand() % 30), (double)(rand() % 30));
            break;
        }

        return new Paladino("a",
                            (double)(rand() % 30), (double)(rand() % 30),
                            (double)(rand() % 30), (double)(rand() % 30));
    }
    void turno(Personagem **atacante, Personagem **defensor)
    {
        std::string cor = (true) ? "\033[1;33m" : "\033[1;27m";
        double danoDoTurno = (*atacante)->DaDano((*defensor));

        if (danoDoTurno < 0)
        {
            danoDoTurno = 0;
        }

        std::cout << cor << (*atacante)->getNome() << " deu \033[0m\033[1;31m"
                  << danoDoTurno << "\033[0m" << cor << " de dano! \033[0m\n"
                  << std::endl;

        (*defensor)->setVida((*defensor)->getVida() - danoDoTurno);
        (*atacante)->VeAVida();
        (*defensor)->VeAVida();
    }
    bool luta(Personagem **principal, Personagem **inimigo)
    {
        int numeroTurno = 0;
        int danoGuardado1 = (*principal)->getDanoEfetuado();
        int danoGuardado2 = (*inimigo)->getDanoEfetuado();
        (*principal)->setDanoEfetuado(0);
        (*inimigo)->setDanoEfetuado(0);
        while ((*principal)->getVida() > 0 && (*inimigo)->getVida() > 0)
        {
            // Turnos
            std::cout << std::endl
                      << "\033[1;34m-> Turno " << numeroTurno + 1 << "\033[0m\t"
                      << std::endl;
            if (numeroTurno % 2 == 0)
            {
                // Tuno P-1
                turno(principal, inimigo);
                (*principal)->mostrar();
                (*inimigo)->mostrar();
                getchar();
            }
            else
            {
                // Turno P-2
                turno(inimigo, principal);
                (*principal)->mostrar();
                (*inimigo)->mostrar();
                getchar();
                // system("cls")
            }
            if ((*principal)->getVida() <= 0)
            {
                return false;
            }
            else if ((*inimigo)->getVida() <= 0)
            {
                (*principal)->zerarEfeitos();
                (*principal)->fullHeal();
                return true;
            }
            numeroTurno++;
        }

        return false;
    }
    Combate()
    {
    }
    ~Combate()
    {
    }
};

namespace posicao
{
    enum coisasMapa
    {
        borda = -1,
        nada = 0,
        jogador = 1,
        inimigo = 2,
        bau = 3,
    };
}

class Mapa
{
private:
    int labirinto[MAPMAX][MAPMAX];

public:
    int getPosicao(int x, int y)
    {
        return labirinto[y][x];
    }
    void setBorda(int x, int y)
    {
        labirinto[y][x] = posicao::borda;
    }
    void setNada(int x, int y)
    {
        labirinto[y][x] = posicao::nada;
    }
    void setJogador(int x, int y)
    {
        labirinto[y][x] = posicao::jogador;
    }
    void setInimigo(int x, int y)
    {
        labirinto[y][x] = posicao::inimigo;
    }
    void setBau(int x, int y)
    {
        labirinto[y][x] = posicao::bau;
    }

    void preencheTabuleiro()
    {
        for (int i = 0; i < MAPMAX; i++)
        {
            for (int a = 0; a < MAPMAX; a++)
            {
                setNada(a, i);
                if (a == 0 || i == 0 || a == MAPMAX - 1 || i == MAPMAX - 1)
                {
                    setBorda(a, i);
                }
            }

            // SFML BIBLIOTECA
            /* int teste[MAMAX][MAMAX]{
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,-1,0,0,2,0,0,3,-1,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,-1,1,-1,-1,-1,-1,-1,-1,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1 },
                 {-1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1 },
                 {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 }
             };
             for (int i = 0; i < MAMAX;i++) {
                 for (int a = 0; a < MAMAX;a++) {
                     labirinto[i][a] = teste[i][a];
                 }
             }*/
        }
    }
    void exibeTabuleiro()
    {

        std::cout << "teste \t\t\t teste" << std::endl;
        for (int i = 0; i < MAPMAX; i++)
        {
            for (int a = 0; a < MAPMAX; a++)
            {
                if (a == 0)
                {
                    pula();
                }
                switch (labirinto[i][a])
                {
                case posicao::borda:
                    std::cout << char(219);
                    break;
                case posicao::nada:
                    printa(" ");
                    break;
                case posicao::jogador:
                    printa("\033[1;34m");
                    printa("X");
                    printa("\033[0m");
                    break;
                case posicao::inimigo:
                    printa("\033[1;32m");
                    printa("X");
                    printa("\033[0m");
                    break;
                case posicao::bau:
                    printa("\033[1;33m");
                    printa("X");
                    printa("\033[0m");
                    break;
                }
            }
        }
        pula();
    }

    Mapa()
    {
        preencheTabuleiro();
    }
    ~Mapa()
    {
    }
};

class Jogador
{
private:
    Personagem *principal;
    Mapa mapa = Mapa();
    Combate combate = Combate();
    int x = 0;
    int y = 0;
    bool jogo = true;

public:
    void getPosicaoInicial(int x, int y)
    {
        for (int i = 0; i < MAPMAX; i++)
        {
            for (int a = 0; a < MAPMAX; a++)
            {
                if (mapa.getPosicao(i, a) == posicao::jogador)
                {
                    this->x = i;
                    this->y = a;
                }
            }
        }
    }
    int getX()
    {
        return x;
    }
    int getY()
    {
        return y;
    }
    void setX(int x)
    {
        this->x = x;
    }
    void setY(int y)
    {
        this->y = y;
    }
    bool verificaColisao(int movimento)
    {
        switch (movimento)
        {
        case posicao::nada:
            return true;
            break;
        case posicao::inimigo:
        {
            Personagem *inimigo = combate.inimigoAleatorio();
            if (combate.luta(&principal, &inimigo) == true)
            {
                return true; // apaga o inimigo
            }
            else
            {
                return false; // deve encerrar o jogo / tela de game over
            }
        }
        break;
        default:
            return false;
            break;
        }
    }
    void moveY(int aumento)
    {

        int movimento = mapa.getPosicao(this->x, (this->y + aumento));

        if (verificaColisao(movimento))
        {
            this->y += aumento;
        }
    }
    void moveX(int aumento)
    {
        int movimento = mapa.getPosicao((this->x + aumento), this->y);
        if (verificaColisao(movimento))
        {
            this->x += aumento;
        }
    }

    void execucao()
    {
        char command = '0';
        bool foiAlterado = true;
        while (jogo)
        {
            if (foiAlterado)
            {
                // system("cls");
                // std::cout << std::endl << std::endl << std::endl;
                mapa.exibeTabuleiro();
                foiAlterado = false;
            }
            command = _getch();
            switch (command)
            {
            case 'r':
                foiAlterado = true;
                mapa.setBau(rand() % MAPMAX, rand() % MAPMAX);
                break;
            case 'w':
                foiAlterado = true;
                mapa.setNada(getX(), getY());
                moveY(-1);
                mapa.setJogador(getX(), getY());
                break;
            case 'a':
                foiAlterado = true;
                mapa.setNada(getX(), getY());
                moveX(-1);
                mapa.setJogador(getX(), getY());
                break;
            case 's':
                foiAlterado = true;
                mapa.setNada(getX(), getY());
                moveY(+1);
                mapa.setJogador(getX(), getY());
                break;
            case 'd':
                foiAlterado = true;
                mapa.setNada(getX(), getY());
                moveX(+1);
                mapa.setJogador(getX(), getY());
                break;
            case 'z':
                foiAlterado = true;
                mapa.setInimigo(rand() % MAPMAX, rand() % MAPMAX);
                break;
            case 'x':
                jogo = false;
                break;

            default:
                break;
            }
        }
    }
    Jogador(Mapa mapa, int x, int y, Personagem **principal) : mapa(mapa), x(x), y(y), principal(*principal)
    {
        getPosicaoInicial(x, y);
        execucao();
    }
    Jogador()
    {
    }
    ~Jogador()
    {
    }
};

class JogoRpg
{
private:
    Personagem *principal = new Monge("Otario", 150, 80, 70, 69);

public:
    void mostraPers()
    {
        int i = 0;

        principal->mostrar();
        i++;
    }
    void mostraDerrotados()
    {
        int i = 0, posicao = 0;

        if (principal->getDerrotados(0) != nullptr)
        {
            std::cout << principal->getNome() << "\033[1;31m Derrotou: \033[0m"
                      << std::endl;
            while (posicao >= 0 && posicao < principal->getIndexDerrotados() &&
                   principal->getDerrotados(posicao) != nullptr)
            {
                std::cout << principal->getDerrotados(posicao)->getNome()
                          << std::endl;
                posicao++;
            }
            std::cout << std::endl;
            posicao = 0;
        }
        i++;
    }
    void mostraEstatistica()
    {
        principal->estatisticas();
    }
    JogoRpg()
    {
        Mapa m = Mapa();
        Jogador j = Jogador(m, 1, 1, &principal);
    }

    ~JogoRpg()
    {
        delete (principal);
    }
};

int main()
{
    JogoRpg j = JogoRpg();
}
